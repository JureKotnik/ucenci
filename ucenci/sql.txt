/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DODAJ

CREATE OR REPLACE FUNCTION add_dejavnost (imeR VARCHAR (100), datum_zacetekR TIMESTAMP, datum_konecR VARCHAR(40), opisR TEXT)
RETURNS SETOF dejavnosti AS
$$
DECLARE
	res dejavnosti%ROWTYPE;
BEGIN
	INSERT INTO dejavnosti (ime, datum_zacetek, datum_konec, opis) VALUES (imeR, datum_zacetekR, datum_konecR, opisR)
	RETURNING * INTO res;
	RETURN NEXT res;
END
$$LANGUAGE 'plpgsql';



CREATE OR REPLACE FUNCTION add_dijak (imeR VARCHAR(100), priimekR VARCHAR(100), telefonR VARCHAR(100), emailR VARCHAR(100), opisR TEXT, datum_roj VARCHAR(100))
RETURNS SETOF dijaki AS
$$
DECLARE
	res dijaki%ROWTYPE;
BEGIN
	INSERT INTO dijaki (ime, priimek, telefon, email, opis, datum_roj) VALUES (imeR, priimekR, telefonR, emailR, opisR, datum_rojR)
	RETURNING * INTO res;
	RETURN NEXT res;
END
$$LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION add_kraj (imeR VARCHAR (100), postna_stevilkaR INTEGER, opisR TEXT)
RETURNS SETOF kraji AS
$$
DECLARE
	res kraji%ROWTYPE;
BEGIN
	INSERT INTO kraji (ime, postna_stevilka, opis) VALUES (imeR, postna_stevilkaR, opisR)
	RETURNING * INTO res;
	RETURN NEXT res;
END
$$LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION add_naloge (imeR VARCHAR (100), opravilR BOOLEAN, opisR TEXT)
RETURNS SETOF naloge AS
$$
DECLARE
	res naloge%ROWTYPE;
BEGIN
	INSERT INTO naloge (ime, opravil, opis) VALUES (imeR, opravilR, opisR)
	RETURNING * INTO res;
	RETURN NEXT res;
END
$$LANGUAGE 'plpgsql';


CREATE OR REPLACE FUNCTION add_uporabniki (imeR VARCHAR(100), priimekR VARCHAR(100), emailR VARCHAR(100), telefonR INTEGER, usernameR VARCHAR(100), gesloR VARCHAR(255))
RETURNS SETOF uporabniki AS
$$
DECLARE
	res uporabniki%ROWTYPE;
BEGIN
	INSERT INTO uporabniki (ime, priimek, email, telefon, username, geslo) VALUES (imeR, priimekR, emailR, telefonR, usernameR, gesloR)
	RETURNING * INTO res;
	RETURN NEXT res;
END
$$LANGUAGE 'plpgsql';

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

TRIGGER

Trigger

CREATE OR REPLACE FUNCTION dejavnost_spremembe()
  RETURNS TRIGGER 
  LANGUAGE plpgsql
  AS
$$
BEGIN
	IF NEW.ime <> OLD.ime THEN
		 INSERT INTO Dejavnosti(ID,ime,sprememba)
		 VALUES(OLD.id,OLD.last_name,now());
	END IF;

	RETURN NEW;
END;
$$

CREATE TRIGGER dejavnost_spreminjanje
BEFORE UPDATE
ON Dejavnosti
FOR EACH ROW
EXECUTE PROCEDURE dejavnost_spremembe();

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

SELECT

CREATE FUNCTION izberi_dejavnost()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Dejavnosti;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_kraj()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Kraji;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_naloge()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Naloge;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_dijak()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Dijaki;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_uporabniki()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Uporabniki;
END;
$$
LANGUAGE 'plpgsql';

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

UPDATE

CREATE FUNCTION update_kraj(t INTEGER,i VARCHAR(60),p INTEGER,o TEXT)
RETURNS void AS
$$
BEGIN 
 UPDATE kraji
 SET ime = i, postna_stevilka = p, opis = o
 WHERE id=t; 
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION update_dejavnost(t INTEGER,i VARCHAR(60),d timestamp,k timestamp,op text)
RETURNS void AS
$$
BEGIN 
 UPDATE dejavnosti
 SET ime = i, datum_zacetek = d, datum_konec = k, opis = op, sprememba = timestamp
 WHERE id=t; 
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION update_dijaki(q INTEGER,i VARCHAR(60),p VARCHAR(60),d VARCHAR(60),t VARCHAR(60),e VARCHAR(60),o TEXT)
RETURNS void AS
$$
BEGIN 
 UPDATE dijaki
 SET ime = i, priimerk = p, datum_roj = d, telefon = t, email = e, opis = 0
 WHERE id=q; 
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION update_naloge(q INTEGER,i VARCHAR(60),o BOOL,op TEXT)
RETURNS void AS
$$
BEGIN 
 UPDATE naloge
 SET ime = i, opravil = o, opis = op
 WHERE id=q; 
END;
$$
LANGUAGE 'plpgsql';

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

DELETE

CREATE FUNCTION clean_kraji(i INTEGER)
RETURNS void AS
$$
BEGIN DELETE FROM kraji
WHERE id=i;
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION clean_dejavnosti(i INTEGER)
RETURNS void AS
$$
BEGIN DELETE FROM dejavnosti
WHERE id=i;
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION clean_dijaki(i INTEGER)
RETURNS void AS
$$
BEGIN DELETE FROM dijaki
WHERE id=i;
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION clean_naloge(i INTEGER)
RETURNS void AS
$$
BEGIN DELETE FROM naloge
WHERE id=i;
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION clean_uporaniki(i INTEGER)
RETURNS void AS
$$
BEGIN DELETE FROM uporabniki
WHERE id=i;
END;
$$
LANGUAGE 'plpgsql';

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////