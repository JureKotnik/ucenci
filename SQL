Trigger

CREATE OR REPLACE FUNCTION dejavnost_spremembe()
  RETURNS TRIGGER 
  LANGUAGE plpgsql
  AS
$$
BEGIN
	IF NEW.ime <> OLD.ime THEN
		 INSERT INTO Dejavnosti(ID,ime,sprememba)
		 VALUES(OLD.id,OLD.last_name,now());
	END IF;

	RETURN NEW;
END;
$$

CREATE TRIGGER dejavnost_spreminjanje
BEFORE UPDATE
ON Dejavnosti
FOR EACH ROW
EXECUTE PROCEDURE dejavnost_spremembe();

Podprogram SELECT

CREATE FUNCTION izberi_dejavnost()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Dejavnosti;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_kraj()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Kraji;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_naloge()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Naloge;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_dijak()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Dijaki;
END;
$$
LANGUAGE 'plpgsql';


CREATE FUNCTION izberi_uporabniki()
RETURNS void AS
$$
BEGIN 
SELECT * FROM Uporabniki;
END;
$$
LANGUAGE 'plpgsql';

UPDATE

CREATE FUNCTION update_kraj(t INTEGER,i VARCHAR(60),p INTEGER,o TEXT)
RETURNS void AS
$$
BEGIN 
 UPDATE kraji
 SET ime = i, postna_stevilka = p, opis = o
 WHERE id=t; 
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION update_dejavnost(t INTEGER,i VARCHAR(60),d timestamp,k timestamp,op text)
RETURNS void AS
$$
BEGIN 
 UPDATE dejavnosti
 SET ime = i, datum_zacetek = d, datum_konec = k, opis = op, sprememba = timestamp
 WHERE id=t; 
END;
$$
LANGUAGE 'plpgsql';

CREATE FUNCTION update_dijaki(q INTEGER,i VARCHAR(60),p VARCHAR(60),d VARCHAR(60),t VARCHAR(60),e VARCHAR(60),o TEXT)
RETURNS void AS
$$
BEGIN 
 UPDATE dijaki
 SET ime = i, priimerk = p, datum_roj = d, telefon = t, email = e, opis = 0
 WHERE id=q; 
END;
$$
LANGUAGE 'plpgsql';
